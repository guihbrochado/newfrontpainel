{"version":3,"file":"useWindow-DJtzQdYK.js","sources":["../../node_modules/@restart/hooks/esm/useCallbackRef.js","../../node_modules/@restart/hooks/esm/useIsomorphicEffect.js","../../node_modules/dom-helpers/esm/contains.js","../../node_modules/@restart/ui/esm/useWindow.js"],"sourcesContent":["import { useState } from 'react';\n\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\nexport default function useCallbackRef() {\n  return useState(null);\n}","import { useEffect, useLayoutEffect } from 'react';\nconst isReactNative = typeof global !== 'undefined' &&\n// @ts-ignore\nglobal.navigator &&\n// @ts-ignore\nglobal.navigator.product === 'ReactNative';\nconst isDOM = typeof document !== 'undefined';\n\n/**\n * Is `useLayoutEffect` in a DOM or React Native environment, otherwise resolves to useEffect\n * Only useful to avoid the console warning.\n *\n * PREFER `useEffect` UNLESS YOU KNOW WHAT YOU ARE DOING.\n *\n * @category effects\n */\nexport default isDOM || isReactNative ? useLayoutEffect : useEffect;","/* eslint-disable no-bitwise, no-cond-assign */\n\n/**\n * Checks if an element contains another given element.\n * \n * @param context the context element\n * @param node the element to check\n */\nexport default function contains(context, node) {\n  // HTML DOM and SVG DOM may have different support levels,\n  // so we need to check on context instead of a document root element.\n  if (context.contains) return context.contains(node);\n  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);\n}","import { createContext, useContext } from 'react';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nconst Context = /*#__PURE__*/createContext(canUseDOM ? window : undefined);\nexport const WindowProvider = Context.Provider;\n\n/**\n * The document \"window\" placed in React context. Helpful for determining\n * SSR context, or when rendering into an iframe.\n *\n * @returns the current window\n */\nexport default function useWindow() {\n  return useContext(Context);\n}"],"names":["useCallbackRef","useState","isReactNative","isDOM","useIsomorphicEffect","useLayoutEffect","useEffect","contains","context","node","Context","createContext","canUseDOM","useWindow","useContext"],"mappings":"+CA0Be,SAASA,GAAiB,CACvC,OAAOC,EAAAA,SAAS,IAAI,CACtB,CC3BA,MAAMC,EAAgB,OAAO,OAAW,KAExC,OAAO,WAEP,OAAO,UAAU,UAAY,cACvBC,EAAQ,OAAO,SAAa,IAUlCC,EAAeD,GAASD,EAAgBG,EAAAA,gBAAkBC,EAAS,UCRpD,SAASC,EAASC,EAASC,EAAM,CAG9C,GAAID,EAAQ,SAAU,OAAOA,EAAQ,SAASC,CAAI,EAClD,GAAID,EAAQ,wBAAyB,OAAOA,IAAYC,GAAQ,CAAC,EAAED,EAAQ,wBAAwBC,CAAI,EAAI,GAC7G,CCXA,MAAMC,EAAuBC,EAAa,cAACC,EAAY,OAAS,MAAS,EAC3CF,EAAQ,SAQvB,SAASG,GAAY,CAClC,OAAOC,EAAAA,WAAWJ,CAAO,CAC3B","x_google_ignoreList":[0,1,2,3]}
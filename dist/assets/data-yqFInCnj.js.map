{"version":3,"file":"data-yqFInCnj.js","sources":["../../src/utils/promise.ts","../../src/helpers/data.ts"],"sourcesContent":["export const sleep = (ms: number = 100) => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n","import { clients, folders, pricingPlans, projects, tasks, teams, users } from '@/assets/data/other'\nimport { customers, ordersData, products } from '@/assets/data/products'\nimport type {\n  ClientType,\n  CustomerType,\n  FolderType,\n  OrderType,\n  PricingType,\n  ProductType,\n  ProjectType,\n  TaskType,\n  TeamType,\n  UserType,\n} from '@/types/data'\nimport { sleep } from '@/utils/promise'\n\nexport const getAllClients = async (): Promise<ClientType[]> => {\n  const data = clients.map((client) => {\n    const user = users.find((user) => user.id === client.userId)\n    return {\n      ...client,\n      user,\n    }\n  })\n  await sleep()\n  return data\n}\n\nexport const getAllOrderItems = async (): Promise<OrderType[]> => {\n  const data = ordersData.map((order) => {\n    const product = products.find((product) => product.id === order.productId)\n    return {\n      ...order,\n      product,\n    }\n  })\n  await sleep()\n  return data\n}\n\nexport const getUserById = async (id: UserType['id']): Promise<UserType | undefined> => {\n  const data = users.find((user) => user.id === id)\n  await sleep()\n  return data\n}\n\nexport const getAllUsers = async (): Promise<UserType[]> => {\n  const data = users\n  await sleep()\n  return data\n}\n\nexport const getAllProducts = async (): Promise<ProductType[]> => {\n  await sleep()\n  return products\n}\n\nexport const getAllCustomers = async (): Promise<CustomerType[]> => {\n  await sleep()\n  return customers\n}\n\nexport const getAllFolders = async (): Promise<FolderType[]> => {\n  await sleep()\n  return folders\n}\n\nexport const getCustomersById = async (id: CustomerType['id']): Promise<CustomerType | undefined> => {\n  const data = customers.find((customer) => customer.id == id)\n  await sleep()\n  return data\n}\n\nexport const getOrderById = async (id: ProductType['id']): Promise<ProductType | undefined> => {\n  const data = products.find((product) => product.id == id)\n  await sleep()\n  return data\n}\n\nexport const getAllPricingPlans = async (): Promise<PricingType[]> => {\n  await sleep()\n  return pricingPlans\n}\n\nexport const getAllTeams = async (): Promise<TeamType[]> => {\n  const data = teams.map((team) => {\n    const user = users.find((user) => user.id === team.userId)\n    const members = team.membersId.map((member) => {\n      const teamMembers = users.find((user) => user.id === member)\n      if (teamMembers) {\n        return teamMembers\n      }\n    })\n    return {\n      ...team,\n      user,\n      members,\n    }\n  })\n  await sleep()\n  return data\n}\n\nexport const getAllProjects = async (): Promise<ProjectType[]> => {\n  const allTeams = await getAllTeams()\n  const data = projects.map((project) => {\n    const teams = allTeams.find((team) => team.id === project.teamId)\n\n    return {\n      ...project,\n      teams,\n    }\n  })\n  await sleep()\n  return data\n}\n\nexport const getAllTasks = async (): Promise<TaskType[]> => {\n  const allProjects = await getAllProjects()\n  const data = tasks.map((task) => {\n    const projects = allProjects.find((project) => project.id === task.projectId)\n    const allUsers = users.find((user) => user.id === task.userId)\n\n    return {\n      ...task,\n      projects,\n      allUsers,\n    }\n  })\n  await sleep()\n  return data\n}\n"],"names":["sleep","ms","resolve","getAllClients","data","clients","client","user","users","getAllOrderItems","ordersData","order","product","products","getUserById","id","getAllUsers","getAllProducts","getAllCustomers","customers","getAllFolders","folders","getCustomersById","customer","getOrderById","getAllPricingPlans","pricingPlans","getAllTeams","teams","team","members","member","teamMembers","getAllProjects","allTeams","projects","project","getAllTasks","allProjects","tasks","task","allUsers"],"mappings":"sIAAa,MAAAA,EAAQ,CAACC,EAAa,MAC1B,IAAI,QAASC,GAAY,WAAWA,EAASD,CAAE,CAAC,ECe5CE,EAAgB,SAAmC,CAC9D,MAAMC,EAAOC,EAAQ,IAAKC,GAAW,CAC7B,MAAAC,EAAOC,EAAM,KAAMD,GAASA,EAAK,KAAOD,EAAO,MAAM,EACpD,MAAA,CACL,GAAGA,EACH,KAAAC,CACF,CAAA,CACD,EACD,aAAMP,EAAM,EACLI,CACT,EAEaK,EAAmB,SAAkC,CAChE,MAAML,EAAOM,EAAW,IAAKC,GAAU,CAC/B,MAAAC,EAAUC,EAAS,KAAMD,GAAYA,EAAQ,KAAOD,EAAM,SAAS,EAClE,MAAA,CACL,GAAGA,EACH,QAAAC,CACF,CAAA,CACD,EACD,aAAMZ,EAAM,EACLI,CACT,EAEaU,EAAc,MAAOC,GAAsD,CACtF,MAAMX,EAAOI,EAAM,KAAMD,GAASA,EAAK,KAAOQ,CAAE,EAChD,aAAMf,EAAM,EACLI,CACT,EAEaY,EAAc,SAAiC,CAC1D,MAAMZ,EAAOI,EACb,aAAMR,EAAM,EACLI,CACT,EAEaa,EAAiB,UAC5B,MAAMjB,EAAM,EACLa,GAGIK,EAAkB,UAC7B,MAAMlB,EAAM,EACLmB,GAGIC,EAAgB,UAC3B,MAAMpB,EAAM,EACLqB,GAGIC,EAAmB,MAAOP,GAA8D,CACnG,MAAMX,EAAOe,EAAU,KAAMI,GAAaA,EAAS,IAAMR,CAAE,EAC3D,aAAMf,EAAM,EACLI,CACT,EAEaoB,EAAe,MAAOT,GAA4D,CAC7F,MAAMX,EAAOS,EAAS,KAAMD,GAAYA,EAAQ,IAAMG,CAAE,EACxD,aAAMf,EAAM,EACLI,CACT,EAEaqB,EAAqB,UAChC,MAAMzB,EAAM,EACL0B,GAGIC,EAAc,SAAiC,CAC1D,MAAMvB,EAAOwB,EAAM,IAAKC,GAAS,CACzB,MAAAtB,EAAOC,EAAM,KAAMD,GAASA,EAAK,KAAOsB,EAAK,MAAM,EACnDC,EAAUD,EAAK,UAAU,IAAKE,GAAW,CAC7C,MAAMC,EAAcxB,EAAM,KAAMD,GAASA,EAAK,KAAOwB,CAAM,EAC3D,GAAIC,EACK,OAAAA,CACT,CACD,EACM,MAAA,CACL,GAAGH,EACH,KAAAtB,EACA,QAAAuB,CACF,CAAA,CACD,EACD,aAAM9B,EAAM,EACLI,CACT,EAEa6B,EAAiB,SAAoC,CAC1D,MAAAC,EAAW,MAAMP,EAAY,EAC7BvB,EAAO+B,EAAS,IAAKC,GAAY,CAC/BR,MAAAA,EAAQM,EAAS,KAAML,GAASA,EAAK,KAAOO,EAAQ,MAAM,EAEzD,MAAA,CACL,GAAGA,EACH,MAAAR,CACF,CAAA,CACD,EACD,aAAM5B,EAAM,EACLI,CACT,EAEaiC,EAAc,SAAiC,CACpD,MAAAC,EAAc,MAAML,EAAe,EACnC7B,EAAOmC,EAAM,IAAKC,GAAS,CACzBL,MAAAA,EAAWG,EAAY,KAAMF,GAAYA,EAAQ,KAAOI,EAAK,SAAS,EACtEC,EAAWjC,EAAM,KAAMD,GAASA,EAAK,KAAOiC,EAAK,MAAM,EAEtD,MAAA,CACL,GAAGA,EACH,SAAAL,EACA,SAAAM,CACF,CAAA,CACD,EACD,aAAMzC,EAAM,EACLI,CACT"}
import "./chunk-EWTE5DHJ.js";

// node_modules/filepond-plugin-file-encode/dist/filepond-plugin-file-encode.esm.js
var DataURIWorker = function() {
  self.onmessage = (e) => {
    convert(e.data.message, (response) => {
      self.postMessage({ id: e.data.id, message: response });
    });
  };
  const convert = (options, cb) => {
    const { file } = options;
    const reader = new FileReader();
    reader.onloadend = () => {
      cb(reader.result.replace("data:", "").replace(/^.+,/, ""));
    };
    reader.readAsDataURL(file);
  };
};
var plugin = ({ addFilter, utils }) => {
  const { Type, createWorker, createRoute, isFile } = utils;
  const encode = ({ name, file }) => new Promise((resolve) => {
    const worker = createWorker(DataURIWorker);
    worker.post({ file }, (data) => {
      resolve({ name, data });
      worker.terminate();
    });
  });
  const base64Cache = [];
  addFilter("DID_CREATE_ITEM", (item, { query }) => {
    if (!query("GET_ALLOW_FILE_ENCODE")) return;
    item.extend(
      "getFileEncodeBase64String",
      () => base64Cache[item.id] && base64Cache[item.id].data
    );
    item.extend(
      "getFileEncodeDataURL",
      () => base64Cache[item.id] && `data:${item.fileType};base64,${base64Cache[item.id].data}`
    );
  });
  addFilter(
    "SHOULD_PREPARE_OUTPUT",
    (shouldPrepareOutput, { query }) => new Promise((resolve) => {
      resolve(query("GET_ALLOW_FILE_ENCODE"));
    })
  );
  addFilter(
    "COMPLETE_PREPARE_OUTPUT",
    (file, { item, query }) => new Promise((resolve) => {
      if (!query("GET_ALLOW_FILE_ENCODE") || !isFile(file) && !Array.isArray(file)) {
        return resolve(file);
      }
      base64Cache[item.id] = {
        metadata: item.getMetadata(),
        data: null
      };
      Promise.all(
        (file instanceof Blob ? [{ name: null, file }] : file).map(encode)
      ).then((dataItems) => {
        base64Cache[item.id].data = file instanceof Blob ? dataItems[0].data : dataItems;
        resolve(file);
      });
    })
  );
  addFilter("CREATE_VIEW", (viewAPI) => {
    const { is, view, query } = viewAPI;
    if (!is("file-wrapper") || !query("GET_ALLOW_FILE_ENCODE")) {
      return;
    }
    view.registerWriter(
      createRoute({
        DID_PREPARE_OUTPUT: ({ root, action }) => {
          if (query("IS_ASYNC")) {
            return;
          }
          const item = query("GET_ITEM", action.id);
          if (!item) return;
          const cache = base64Cache[item.id];
          const metadata = cache.metadata;
          const data = cache.data;
          const value = JSON.stringify({
            id: item.id,
            name: item.file.name,
            type: item.file.type,
            size: item.file.size,
            metadata,
            data
          });
          if (root.ref.data) {
            root.ref.data.value = value;
          } else {
            root.dispatch("DID_DEFINE_VALUE", {
              id: item.id,
              value
            });
          }
        },
        DID_REMOVE_ITEM: ({ action }) => {
          const item = query("GET_ITEM", action.id);
          if (!item) return;
          delete base64Cache[item.id];
        }
      })
    );
  });
  return {
    options: {
      // Enable or disable file encoding
      allowFileEncode: [true, Type.BOOLEAN]
    }
  };
};
var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
if (isBrowser) {
  document.dispatchEvent(new CustomEvent("FilePond:pluginloaded", { detail: plugin }));
}
var filepond_plugin_file_encode_esm_default = plugin;
export {
  filepond_plugin_file_encode_esm_default as default
};
/*! Bundled license information:

filepond-plugin-file-encode/dist/filepond-plugin-file-encode.esm.js:
  (*!
   * FilePondPluginFileEncode 2.1.14
   * Licensed under MIT, https://opensource.org/licenses/MIT/
   * Please visit https://pqina.nl/filepond/ for details.
   *)
*/
//# sourceMappingURL=filepond-plugin-file-encode.js.map

{
  "version": 3,
  "sources": ["../../filepond-plugin-file-encode/dist/filepond-plugin-file-encode.esm.js"],
  "sourcesContent": ["/*!\n * FilePondPluginFileEncode 2.1.14\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\nconst DataURIWorker = function() {\n    // route messages\n    self.onmessage = e => {\n        convert(e.data.message, response => {\n            self.postMessage({ id: e.data.id, message: response });\n        });\n    };\n\n    // convert file to data uri\n    const convert = (options, cb) => {\n        const { file } = options;\n\n        const reader = new FileReader();\n        reader.onloadend = () => {\n            cb(reader.result.replace('data:', '').replace(/^.+,/, ''));\n        };\n        reader.readAsDataURL(file);\n    };\n};\n\nconst plugin = ({ addFilter, utils }) => {\n    // get quick reference to Type utils\n    const { Type, createWorker, createRoute, isFile } = utils;\n\n    const encode = ({ name, file }) =>\n        new Promise(resolve => {\n            const worker = createWorker(DataURIWorker);\n            worker.post({ file }, data => {\n                resolve({ name, data });\n                worker.terminate();\n            });\n        });\n\n    // holds base64 strings till can be moved to item\n    const base64Cache = [];\n    addFilter('DID_CREATE_ITEM', (item, { query }) => {\n        if (!query('GET_ALLOW_FILE_ENCODE')) return;\n\n        item.extend(\n            'getFileEncodeBase64String',\n            () => base64Cache[item.id] && base64Cache[item.id].data\n        );\n        item.extend(\n            'getFileEncodeDataURL',\n            () =>\n                base64Cache[item.id] && `data:${item.fileType};base64,${base64Cache[item.id].data}`\n        );\n    });\n\n    addFilter(\n        'SHOULD_PREPARE_OUTPUT',\n        (shouldPrepareOutput, { query }) =>\n            new Promise(resolve => {\n                resolve(query('GET_ALLOW_FILE_ENCODE'));\n            })\n    );\n\n    addFilter(\n        'COMPLETE_PREPARE_OUTPUT',\n        (file, { item, query }) =>\n            new Promise(resolve => {\n                // if it's not a file or a list of files, continue\n                if (!query('GET_ALLOW_FILE_ENCODE') || (!isFile(file) && !Array.isArray(file))) {\n                    return resolve(file);\n                }\n\n                // store metadata settings for this cache\n                base64Cache[item.id] = {\n                    metadata: item.getMetadata(),\n                    data: null,\n                };\n\n                // wait for all file items to be encoded\n                Promise.all(\n                    (file instanceof Blob ? [{ name: null, file }] : file).map(encode)\n                ).then(dataItems => {\n                    base64Cache[item.id].data =\n                        file instanceof Blob ? dataItems[0].data : dataItems;\n                    resolve(file);\n                });\n            })\n    );\n\n    // called for each view that is created right after the 'create' method\n    addFilter('CREATE_VIEW', viewAPI => {\n        // get reference to created view\n        const { is, view, query } = viewAPI;\n\n        // only hook up to item view\n        if (!is('file-wrapper') || !query('GET_ALLOW_FILE_ENCODE')) {\n            return;\n        }\n\n        view.registerWriter(\n            createRoute({\n                DID_PREPARE_OUTPUT: ({ root, action }) => {\n                    // only do this if is not uploading async\n                    if (query('IS_ASYNC')) {\n                        return;\n                    }\n\n                    const item = query('GET_ITEM', action.id);\n                    if (!item) return;\n\n                    // extract base64 string\n                    const cache = base64Cache[item.id];\n                    const metadata = cache.metadata;\n                    const data = cache.data;\n\n                    // create JSON string from encoded data\n                    const value = JSON.stringify({\n                        id: item.id,\n                        name: item.file.name,\n                        type: item.file.type,\n                        size: item.file.size,\n                        metadata: metadata,\n                        data,\n                    });\n\n                    // for filepond < 4.13.0\n                    if (root.ref.data) {\n                        root.ref.data.value = value;\n                    }\n                    // newer versions\n                    else {\n                        root.dispatch('DID_DEFINE_VALUE', {\n                            id: item.id,\n                            value,\n                        });\n                    }\n                },\n                DID_REMOVE_ITEM: ({ action }) => {\n                    const item = query('GET_ITEM', action.id);\n                    if (!item) return;\n                    delete base64Cache[item.id];\n                },\n            })\n        );\n    });\n\n    return {\n        options: {\n            // Enable or disable file encoding\n            allowFileEncode: [true, Type.BOOLEAN],\n        },\n    };\n};\n\n// fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\nconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\nif (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', { detail: plugin }));\n}\n\nexport default plugin;\n"],
  "mappings": "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",
  "names": []
}

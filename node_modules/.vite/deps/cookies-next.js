import {
  __commonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/cookie/index.js
var require_cookie = __commonJS({
  "node_modules/cookie/index.js"(exports) {
    "use strict";
    exports.parse = parse;
    exports.serialize = serialize;
    var __toString = Object.prototype.toString;
    var __hasOwnProperty = Object.prototype.hasOwnProperty;
    var cookieNameRegExp = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
    var cookieValueRegExp = /^("?)[\u0021\u0023-\u002B\u002D-\u003A\u003C-\u005B\u005D-\u007E]*\1$/;
    var domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
    var pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
    function parse(str, opt) {
      if (typeof str !== "string") {
        throw new TypeError("argument str must be a string");
      }
      var obj = {};
      var len = str.length;
      if (len < 2) return obj;
      var dec = opt && opt.decode || decode;
      var index = 0;
      var eqIdx = 0;
      var endIdx = 0;
      do {
        eqIdx = str.indexOf("=", index);
        if (eqIdx === -1) break;
        endIdx = str.indexOf(";", index);
        if (endIdx === -1) {
          endIdx = len;
        } else if (eqIdx > endIdx) {
          index = str.lastIndexOf(";", eqIdx - 1) + 1;
          continue;
        }
        var keyStartIdx = startIndex(str, index, eqIdx);
        var keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
        var key = str.slice(keyStartIdx, keyEndIdx);
        if (!__hasOwnProperty.call(obj, key)) {
          var valStartIdx = startIndex(str, eqIdx + 1, endIdx);
          var valEndIdx = endIndex(str, endIdx, valStartIdx);
          if (str.charCodeAt(valStartIdx) === 34 && str.charCodeAt(valEndIdx - 1) === 34) {
            valStartIdx++;
            valEndIdx--;
          }
          var val = str.slice(valStartIdx, valEndIdx);
          obj[key] = tryDecode(val, dec);
        }
        index = endIdx + 1;
      } while (index < len);
      return obj;
    }
    function startIndex(str, index, max) {
      do {
        var code = str.charCodeAt(index);
        if (code !== 32 && code !== 9) return index;
      } while (++index < max);
      return max;
    }
    function endIndex(str, index, min) {
      while (index > min) {
        var code = str.charCodeAt(--index);
        if (code !== 32 && code !== 9) return index + 1;
      }
      return min;
    }
    function serialize(name, val, opt) {
      var enc = opt && opt.encode || encodeURIComponent;
      if (typeof enc !== "function") {
        throw new TypeError("option encode is invalid");
      }
      if (!cookieNameRegExp.test(name)) {
        throw new TypeError("argument name is invalid");
      }
      var value = enc(val);
      if (!cookieValueRegExp.test(value)) {
        throw new TypeError("argument val is invalid");
      }
      var str = name + "=" + value;
      if (!opt) return str;
      if (null != opt.maxAge) {
        var maxAge = Math.floor(opt.maxAge);
        if (!isFinite(maxAge)) {
          throw new TypeError("option maxAge is invalid");
        }
        str += "; Max-Age=" + maxAge;
      }
      if (opt.domain) {
        if (!domainValueRegExp.test(opt.domain)) {
          throw new TypeError("option domain is invalid");
        }
        str += "; Domain=" + opt.domain;
      }
      if (opt.path) {
        if (!pathValueRegExp.test(opt.path)) {
          throw new TypeError("option path is invalid");
        }
        str += "; Path=" + opt.path;
      }
      if (opt.expires) {
        var expires = opt.expires;
        if (!isDate(expires) || isNaN(expires.valueOf())) {
          throw new TypeError("option expires is invalid");
        }
        str += "; Expires=" + expires.toUTCString();
      }
      if (opt.httpOnly) {
        str += "; HttpOnly";
      }
      if (opt.secure) {
        str += "; Secure";
      }
      if (opt.partitioned) {
        str += "; Partitioned";
      }
      if (opt.priority) {
        var priority = typeof opt.priority === "string" ? opt.priority.toLowerCase() : opt.priority;
        switch (priority) {
          case "low":
            str += "; Priority=Low";
            break;
          case "medium":
            str += "; Priority=Medium";
            break;
          case "high":
            str += "; Priority=High";
            break;
          default:
            throw new TypeError("option priority is invalid");
        }
      }
      if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch (sameSite) {
          case true:
            str += "; SameSite=Strict";
            break;
          case "lax":
            str += "; SameSite=Lax";
            break;
          case "strict":
            str += "; SameSite=Strict";
            break;
          case "none":
            str += "; SameSite=None";
            break;
          default:
            throw new TypeError("option sameSite is invalid");
        }
      }
      return str;
    }
    function decode(str) {
      return str.indexOf("%") !== -1 ? decodeURIComponent(str) : str;
    }
    function isDate(val) {
      return __toString.call(val) === "[object Date]";
    }
    function tryDecode(str, decode2) {
      try {
        return decode2(str);
      } catch (e) {
        return str;
      }
    }
  }
});

// node_modules/cookies-next/lib/index.js
var require_lib = __commonJS({
  "node_modules/cookies-next/lib/index.js"(exports) {
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __rest = exports && exports.__rest || function(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasCookie = exports.deleteCookie = exports.setCookie = exports.getCookie = exports.getCookies = void 0;
    var cookie_1 = require_cookie();
    var isClientSide = function() {
      return typeof window !== "undefined";
    };
    var isCookiesFromAppRouter = function(cookieStore) {
      if (!cookieStore)
        return false;
      return "getAll" in cookieStore && "set" in cookieStore && typeof cookieStore.getAll === "function" && typeof cookieStore.set === "function";
    };
    var isContextFromAppRouter = function(context) {
      return !!(context === null || context === void 0 ? void 0 : context.req) && "cookies" in context.req && isCookiesFromAppRouter(context === null || context === void 0 ? void 0 : context.req.cookies) || !!(context === null || context === void 0 ? void 0 : context.res) && "cookies" in context.res && isCookiesFromAppRouter(context === null || context === void 0 ? void 0 : context.res.cookies) || !!(context === null || context === void 0 ? void 0 : context.cookies) && isCookiesFromAppRouter(context.cookies());
    };
    var transformAppRouterCookies = function(cookies) {
      var _cookies = {};
      cookies.getAll().forEach(function(_a) {
        var name = _a.name, value = _a.value;
        _cookies[name] = value;
      });
      return _cookies;
    };
    var stringify = function(value) {
      try {
        if (typeof value === "string") {
          return value;
        }
        var stringifiedValue = JSON.stringify(value);
        return stringifiedValue;
      } catch (e) {
        return value;
      }
    };
    var decode = function(str) {
      if (!str)
        return str;
      return str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
    };
    var getCookies = function(options) {
      if (isContextFromAppRouter(options)) {
        if (options === null || options === void 0 ? void 0 : options.req) {
          return transformAppRouterCookies(options.req.cookies);
        }
        if (options === null || options === void 0 ? void 0 : options.cookies) {
          return transformAppRouterCookies(options.cookies());
        }
      }
      var req;
      if (options)
        req = options.req;
      if (!isClientSide()) {
        if (req && req.cookies)
          return req.cookies;
        if (req && req.headers.cookie)
          return (0, cookie_1.parse)(req.headers.cookie);
        return {};
      }
      var _cookies = {};
      var documentCookies = document.cookie ? document.cookie.split("; ") : [];
      for (var i = 0, len = documentCookies.length; i < len; i++) {
        var cookieParts = documentCookies[i].split("=");
        var _cookie = cookieParts.slice(1).join("=");
        var name_1 = cookieParts[0];
        _cookies[name_1] = _cookie;
      }
      return _cookies;
    };
    exports.getCookies = getCookies;
    var getCookie = function(key, options) {
      var _cookies = (0, exports.getCookies)(options);
      var value = _cookies[key];
      if (value === void 0)
        return void 0;
      return decode(value);
    };
    exports.getCookie = getCookie;
    var setCookie = function(key, data, options) {
      if (isContextFromAppRouter(options)) {
        var req = options.req, res = options.res, cookiesFn = options.cookies, restOptions = __rest(options, ["req", "res", "cookies"]);
        var payload = __assign({ name: key, value: stringify(data) }, restOptions);
        if (req) {
          req.cookies.set(payload);
        }
        if (res) {
          res.cookies.set(payload);
        }
        if (cookiesFn) {
          cookiesFn().set(payload);
        }
        return;
      }
      var _cookieOptions;
      var _req;
      var _res;
      if (options) {
        var _a = options, req = _a.req, res = _a.res, _options = __rest(_a, ["req", "res"]);
        _req = req;
        _res = res;
        _cookieOptions = _options;
      }
      var cookieStr = (0, cookie_1.serialize)(key, stringify(data), __assign({ path: "/" }, _cookieOptions));
      if (!isClientSide()) {
        if (_res && _req) {
          var currentCookies = _res.getHeader("Set-Cookie");
          if (!Array.isArray(currentCookies)) {
            currentCookies = !currentCookies ? [] : [String(currentCookies)];
          }
          _res.setHeader("Set-Cookie", currentCookies.concat(cookieStr));
          if (_req && _req.cookies) {
            var _cookies = _req.cookies;
            data === "" ? delete _cookies[key] : _cookies[key] = stringify(data);
          }
          if (_req && _req.headers && _req.headers.cookie) {
            var _cookies = (0, cookie_1.parse)(_req.headers.cookie);
            data === "" ? delete _cookies[key] : _cookies[key] = stringify(data);
            _req.headers.cookie = Object.entries(_cookies).reduce(function(accum, item) {
              return accum.concat("".concat(item[0], "=").concat(item[1], ";"));
            }, "");
          }
        }
      } else {
        document.cookie = cookieStr;
      }
    };
    exports.setCookie = setCookie;
    var deleteCookie = function(key, options) {
      return (0, exports.setCookie)(key, "", __assign(__assign({}, options), { maxAge: -1 }));
    };
    exports.deleteCookie = deleteCookie;
    var hasCookie = function(key, options) {
      if (!key)
        return false;
      var cookie = (0, exports.getCookies)(options);
      return cookie.hasOwnProperty(key);
    };
    exports.hasCookie = hasCookie;
  }
});
export default require_lib();
/*! Bundled license information:

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)
*/
//# sourceMappingURL=cookies-next.js.map
